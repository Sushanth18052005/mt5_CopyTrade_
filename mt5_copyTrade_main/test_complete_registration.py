#!/usr/bin/env python3
"""
Complete Registration Flow Test
Tests the entire registration process with database storage, SMS, and email verification
"""
import asyncio
import httpx
import json
from datetime import datetime

# Test configuration
# BASE_URL = "https://mt5-copytrade.onrender.com"
BASE_URL = "http://localhost:8000"  # For local testing

class RegistrationTester:
    def __init__(self):
        self.client = httpx.AsyncClient(timeout=30.0)
        # Generate unique test data
        timestamp = int(datetime.now().timestamp())
        self.test_data = {
            "name": f"Test User {timestamp}",
            "mobile": f"+1234567{timestamp % 10000:04d}",
            "email": f"test{timestamp}@example.com",
            "country": "United States",
            "state": "California",
            "city": "Los Angeles",
            "pin_code": "90210",
            "password": "testpassword123",
            "broker": "Vantage",
            "account_no": f"1234567{timestamp % 10000:04d}",
            "trading_password": "trading123",
            "referral_code": None
        }
    
    async def test_registration_flow(self):
        """Test the complete registration flow"""
        print("üöÄ Starting Complete Registration Flow Test")
        print("=" * 50)
        
        try:
            # Step 1: Register user
            print("üìù Step 1: Registering user...")
            register_result = await self.test_user_registration()
            if not register_result["success"]:
                print(f"‚ùå Registration failed: {register_result['message']}")
                return False
            
            print(f"‚úÖ User registered successfully: {register_result['data']}")
            
            # Step 1.5: Activate user for testing
            print("\nüîì Step 1.5: Activating user for testing...")
            activate_result = await self.test_activate_user()
            if not activate_result["success"]:
                print(f"‚ö†Ô∏è User activation failed: {activate_result['message']} (continuing anyway)")
            else:
                print("‚úÖ User activated successfully")
            
            # Step 2: Send mobile OTP
            print("\nüì± Step 2: Sending mobile OTP...")
            mobile_otp_result = await self.test_send_mobile_otp()
            if not mobile_otp_result["success"]:
                print(f"‚ùå Mobile OTP failed: {mobile_otp_result['message']}")
                return False
            
            print(f"‚úÖ Mobile OTP sent: {mobile_otp_result['data']}")
            # Store the OTP for verification
            if mobile_otp_result.get("data", {}).get("otp"):
                self.mobile_otp = mobile_otp_result["data"]["otp"]
            
            # Step 3: Send email OTP
            print("\nüìß Step 3: Sending email OTP...")
            email_otp_result = await self.test_send_email_otp()
            if not email_otp_result["success"]:
                print(f"‚ùå Email OTP failed: {email_otp_result['message']}")
                return False
            
            print(f"‚úÖ Email OTP sent: {email_otp_result['data']}")
            # Store the OTP for verification
            if email_otp_result.get("data", {}).get("otp"):
                self.email_otp = email_otp_result["data"]["otp"]
            
            # Step 4: Verify mobile OTP
            print("\nüîê Step 4: Verifying mobile OTP...")
            mobile_verify_result = await self.test_verify_mobile_otp()
            if not mobile_verify_result["success"]:
                print(f"‚ùå Mobile OTP verification failed: {mobile_verify_result['message']}")
                return False
            
            print("‚úÖ Mobile OTP verified successfully")
            
            # Step 5: Verify email OTP
            print("\nüîê Step 5: Verifying email OTP...")
            email_verify_result = await self.test_verify_email_otp()
            if not email_verify_result["success"]:
                print(f"‚ùå Email OTP verification failed: {email_verify_result['message']}")
                return False
            
            print("‚úÖ Email OTP verified successfully")
            
            # Step 6: Login to get access token
            print("\nüîë Step 6: Logging in to get access token...")
            login_result = await self.test_user_login()
            if not login_result["success"]:
                print(f"‚ùå Login failed: {login_result['message']}")
                return False
            
            access_token = login_result["data"]["access_token"]
            print("‚úÖ Login successful, access token obtained")
            
            # Step 7: Upload IB proof
            print("\nüì∏ Step 7: Uploading IB proof...")
            ib_result = await self.test_upload_ib_proof(access_token)
            if not ib_result["success"]:
                print(f"‚ùå IB proof upload failed: {ib_result['message']}")
                return False
            
            print("‚úÖ IB proof uploaded successfully")
            
            print("\nüéâ Complete Registration Flow Test PASSED!")
            return True
            
        except Exception as e:
            print(f"‚ùå Test failed with exception: {str(e)}")
            return False
        finally:
            await self.client.aclose()
    
    async def test_user_registration(self):
        """Test user registration"""
        try:
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/register",
                json=self.test_data
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error"),
                "data": result.get("data")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_activate_user(self):
        """Test user activation"""
        try:
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/activate-user",
                json={"email": self.test_data["email"]}
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_send_mobile_otp(self):
        """Test sending mobile OTP"""
        try:
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/send-otp",
                json={
                    "mobile_or_email": self.test_data["mobile"],
                    "otp_type": "mobile"
                }
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error"),
                "data": result.get("data")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_send_email_otp(self):
        """Test sending email OTP"""
        try:
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/send-otp",
                json={
                    "mobile_or_email": self.test_data["email"],
                    "otp_type": "email"
                }
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error"),
                "data": result.get("data")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_verify_mobile_otp(self):
        """Test verifying mobile OTP"""
        try:
            # Use the OTP from the previous response
            test_otp = self.mobile_otp if hasattr(self, 'mobile_otp') else "123456"
            
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/verify-otp",
                json={
                    "mobile_or_email": self.test_data["mobile"],
                    "otp": test_otp,
                    "otp_type": "mobile"
                }
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_verify_email_otp(self):
        """Test verifying email OTP"""
        try:
            # Use the OTP from the previous response
            test_otp = self.email_otp if hasattr(self, 'email_otp') else "123456"
            
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/verify-otp",
                json={
                    "mobile_or_email": self.test_data["email"],
                    "otp": test_otp,
                    "otp_type": "email"
                }
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_user_login(self):
        """Test user login"""
        try:
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/login",
                json={
                    "mobile_or_email": self.test_data["email"],
                    "password": self.test_data["password"]
                }
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error"),
                "data": result.get("data")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_upload_ib_proof(self, access_token):
        """Test uploading IB proof"""
        try:
            # Create a mock base64 image (1x1 pixel PNG)
            mock_image = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg=="
            
            response = await self.client.post(
                f"{BASE_URL}/api/v1/auth/upload-ib-proof",
                json={
                    "proof_image": mock_image,
                    "broker": self.test_data["broker"],
                    "account_number": self.test_data["account_no"],
                    "trading_password": self.test_data["trading_password"]
                },
                headers={"Authorization": f"Bearer {access_token}"}
            )
            
            result = response.json()
            return {
                "success": response.status_code == 200 and result.get("success", False),
                "message": result.get("message", "Unknown error"),
                "data": result.get("data")
            }
        except Exception as e:
            return {"success": False, "message": str(e)}
    
    async def test_database_verification(self):
        """Test that user data was stored in database"""
        try:
            # This would require a database query endpoint
            # For now, we'll just verify the user can login
            login_result = await self.test_user_login()
            return login_result
        except Exception as e:
            return {"success": False, "message": str(e)}

async def main():
    """Run the complete registration flow test"""
    tester = RegistrationTester()
    
    print("üß™ MT5 Copy Trading - Complete Registration Flow Test")
    print(f"üåê Testing against: {BASE_URL}")
    print(f"‚è∞ Test started at: {datetime.now()}")
    print()
    
    success = await tester.test_registration_flow()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ ALL TESTS PASSED! Registration flow is working correctly.")
        print("\nüìã Summary:")
        print("   ‚úì User registration with complete data storage")
        print("   ‚úì Twilio SMS OTP sending")
        print("   ‚úì Email OTP sending with Nodemailer")
        print("   ‚úì OTP verification for both mobile and email")
        print("   ‚úì User login with access token")
        print("   ‚úì IB proof upload and storage")
        print("   ‚úì Email notifications sent")
    else:
        print("‚ùå TESTS FAILED! Please check the errors above.")
    
    print(f"‚è∞ Test completed at: {datetime.now()}")

if __name__ == "__main__":
    asyncio.run(main())
